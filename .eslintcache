[{"C:\\React\\messaging-app\\src\\index.js":"1","C:\\React\\messaging-app\\src\\reportWebVitals.js":"2","C:\\React\\messaging-app\\src\\components\\App.js":"3","C:\\React\\messaging-app\\src\\components\\Signup.js":"4","C:\\React\\messaging-app\\src\\components\\Login.js":"5","C:\\React\\messaging-app\\src\\components\\Home.js":"6","C:\\React\\messaging-app\\src\\components\\RightColumn.js":"7","C:\\React\\messaging-app\\src\\components\\LeftColumn.js":"8","C:\\React\\messaging-app\\src\\components\\AddContact.js":"9","C:\\React\\messaging-app\\src\\components\\Conversations.js":"10","C:\\React\\messaging-app\\src\\components\\Contacts.js":"11","C:\\React\\messaging-app\\src\\components\\ConversationLayout.js":"12","C:\\React\\messaging-app\\src\\components\\PrivateRoute.js":"13","C:\\React\\messaging-app\\src\\components\\Settings.js":"14","C:\\React\\messaging-app\\src\\components\\EditProfile.js":"15","C:\\React\\messaging-app\\src\\contexts\\AuthContext.js":"16","C:\\React\\messaging-app\\src\\firebase.js":"17","C:\\React\\messaging-app\\src\\components\\ForgotPassword.js":"18","C:\\React\\messaging-app\\src\\contexts\\FirestoreBeforeLoginContext.js":"19","C:\\React\\messaging-app\\src\\contexts\\FirestoreAfterLoginContext.js":"20"},{"size":915,"mtime":1610894487556,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":761,"mtime":1612114089770,"results":"24","hashOfConfig":"22"},{"size":8122,"mtime":1611266448328,"results":"25","hashOfConfig":"22"},{"size":4598,"mtime":1610806133190,"results":"26","hashOfConfig":"22"},{"size":716,"mtime":1611940520094,"results":"27","hashOfConfig":"22"},{"size":1197,"mtime":1610483105335,"results":"28","hashOfConfig":"22"},{"size":3280,"mtime":1611949248735,"results":"29","hashOfConfig":"22"},{"size":6534,"mtime":1611481546131,"results":"30","hashOfConfig":"22"},{"size":3107,"mtime":1614266241869,"results":"31","hashOfConfig":"22"},{"size":6909,"mtime":1611998296943,"results":"32","hashOfConfig":"22"},{"size":16723,"mtime":1613549712636,"results":"33","hashOfConfig":"22"},{"size":1102,"mtime":1610806266610,"results":"34","hashOfConfig":"22"},{"size":1437,"mtime":1611998557003,"results":"35","hashOfConfig":"22"},{"size":15094,"mtime":1610894695960,"results":"36","hashOfConfig":"22"},{"size":5108,"mtime":1611266223189,"results":"37","hashOfConfig":"22"},{"size":778,"mtime":1611260850941,"results":"38","hashOfConfig":"22"},{"size":4834,"mtime":1610807586314,"results":"39","hashOfConfig":"22"},{"size":1357,"mtime":1611266197942,"results":"40","hashOfConfig":"22"},{"size":10807,"mtime":1614265550034,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"rjshps",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\React\\messaging-app\\src\\index.js",[],["95","96"],"C:\\React\\messaging-app\\src\\reportWebVitals.js",[],"C:\\React\\messaging-app\\src\\components\\App.js",["97"],"import { Switch, Route } from \"react-router-dom\";\nimport \"../App.css\";\nimport Login from \"./Login\";\nimport Signup from \"./Signup.js\";\nimport Home from \"./Home\";\nimport EditProfile from \"./EditProfile\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport ForgotPassword from \"./ForgotPassword\";\n\nfunction App() {\n  return (\n    <div className=\"App bg-dark\">\n      <Switch>\n        <PrivateRoute exact path=\"/login\" component={Login} />\n        <PrivateRoute exact path=\"/signup\" component={Signup} />\n        <PrivateRoute exact path=\"/edit-profile\" component={EditProfile} />\n        <PrivateRoute exact path=\"/reset-password\" component={ForgotPassword} />\n        <PrivateRoute path=\"/\" component={Home} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\React\\messaging-app\\src\\components\\Signup.js",["98","99"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Form, Button, Container, Toast, Spinner, Card } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { BsArrowLeftShort } from \"react-icons/bs\";\r\nimport { FaTimes } from \"react-icons/fa\";\r\nimport { FiAlertCircle } from \"react-icons/fi\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { useFirestoreBeforeLogin } from \"../contexts/FirestoreBeforeLoginContext\";\r\n\r\nexport default function Signup() {\r\n  const {\r\n    signup,\r\n    sendEmailVerification,\r\n    currentUser,\r\n    updateProfile,\r\n  } = useAuth();\r\n  const { createUser } = useFirestoreBeforeLogin();\r\n  const nameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passRef = useRef();\r\n  const confPassRef = useRef();\r\n  const [error, setError] = useState(false);\r\n  const [errorText, setErrorText] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n  const [lengthError, setLengthError] = useState(false);\r\n  const [matchingError, setMatchingError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setError(false);\r\n    setLengthError(false);\r\n    setMatchingError(false);\r\n    setSuccess(false);\r\n    if (\r\n      passRef.current.value.length >= 6 &&\r\n      passRef.current.value === confPassRef.current.value\r\n    ) {\r\n      setLoading(true);\r\n\r\n      signup(emailRef.current.value, passRef.current.value)\r\n        .then(function (value) {\r\n          setSuccess(true);\r\n        })\r\n        .catch(function (error) {\r\n          setError(true);\r\n          setErrorText(error.message);\r\n        });\r\n    }\r\n\r\n    if (passRef.current.value.length < 6) {\r\n      setLengthError(true);\r\n      passRef.current.focus();\r\n    }\r\n    if (passRef.current.value !== confPassRef.current.value) {\r\n      setMatchingError(true);\r\n      passRef.current.focus();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let unsubscribeVerification;\r\n    let unsubscribeName;\r\n    let unsubCreateUser;\r\n    console.log(\"test\", currentUser);\r\n    if (currentUser) {\r\n      unsubscribeName = updateProfile(currentUser, {\r\n        name: nameRef.current.value,\r\n      }).finally(() => {\r\n        unsubCreateUser = createUser({\r\n          uid: currentUser.uid,\r\n          displayName: currentUser.displayName,\r\n          photoURL:\r\n            \"https://firebasestorage.googleapis.com/v0/b/flashsend-ece71.appspot.com/o/blank-profile-picture-973460_640.png?alt=media&token=aaa87789-49e5-477d-897a-ab83ce57ccc7\",\r\n        });\r\n      });\r\n      unsubscribeVerification = sendEmailVerification(currentUser);\r\n    }\r\n\r\n    return [unsubscribeName, unsubscribeVerification, unsubCreateUser];\r\n  }, [currentUser]);\r\n  return (\r\n    <div className=\"signUpContainer min-vh-100 d-flex align-items-center justify-content-center flex-column\">\r\n      <Link to=\"/\">\r\n        <BsArrowLeftShort\r\n          style={{\r\n            position: \"absolute\",\r\n            fontSize: \"3em\",\r\n            top: \"5%\",\r\n            left: \"5%\",\r\n            color: \"white\",\r\n          }}\r\n        />\r\n      </Link>\r\n      <header\r\n        style={{\r\n          color: \"white\",\r\n          textShadow: \"2px 2px 2px red\",\r\n        }}\r\n      >\r\n        Create your account!\r\n      </header>\r\n      <Container className=\"container d-flex justify-content-center p-4\">\r\n        <Form onSubmit={handleSubmit} className=\"col-md-6\">\r\n          <Form.Group>\r\n            <Form.Label>\r\n              Full Name <span className=\"text-danger\">*</span>\r\n            </Form.Label>\r\n            <Form.Control ref={nameRef} type=\"text\" required></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>\r\n              Email <span className=\"text-danger\">*</span>\r\n            </Form.Label>\r\n            <Form.Control ref={emailRef} type=\"email\" required></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>\r\n              Password <span className=\"text-danger\">*</span>\r\n            </Form.Label>\r\n            <Form.Control ref={passRef} type=\"password\" required></Form.Control>\r\n            <Form.Text className=\"text-danger\">\r\n              Password should be at least 6 characters.\r\n            </Form.Text>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>\r\n              Confirm Password <span className=\"text-danger\">*</span>\r\n            </Form.Label>\r\n            <Form.Control\r\n              ref={confPassRef}\r\n              type=\"password\"\r\n              required\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Button\r\n            disabled={loading}\r\n            type=\"submit\"\r\n            className=\"bg-light text-dark font-weight-bold w-100 mt-4 mb-2\"\r\n            style={{\r\n              borderRadius: \"0\",\r\n              boxShadow: \"6px 6px 2px red\",\r\n              fontSize: \"1.2rem\",\r\n            }}\r\n          >\r\n            Create Account\r\n          </Button>\r\n          {/* display toast if password contains less than 6 characters */}\r\n          {lengthError && (\r\n            <Toast className=\"mx-auto mt-4\">\r\n              <Toast.Body className=\"bg-danger text-light\">\r\n                <strong>Password should be at least 6 characters</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n          {/* display toast if passwords doesnt match */}\r\n          {matchingError && (\r\n            <Toast className=\"mx-auto mt-4\">\r\n              <Toast.Body className=\"bg-danger text-light\">\r\n                <strong>Passwords do not match</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n        </Form>\r\n      </Container>\r\n      {/* display overlay with toasts when user creating account */}\r\n      {loading && (\r\n        <div\r\n          className=\"min-vh-100 w-100 d-flex align-items-center justify-content-center position-absolute\"\r\n          style={{ backgroundColor: \"rgba(0,0,0,0.8)\", zIndex: \"999\" }}\r\n        >\r\n          {/* display spinner as long as waiting for firebase response */}\r\n          {!success && !error && (\r\n            <Spinner animation=\"border\" role=\"status\" variant=\"danger\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n          )}\r\n          {/* display this toast if response is success */}\r\n          {success && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => {\r\n                setLoading(false);\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FiAlertCircle\r\n                  style={{\r\n                    color: \"orange\",\r\n                    fontSize: \"2.5rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n                <strong>\r\n                  Your account created successfully! You need to verify your\r\n                  email address by following the instructions included in the\r\n                  mail we sent you!\r\n                </strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n          {/* display this toast if request fails */}\r\n          {error && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => setLoading(false)}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FaTimes\r\n                  style={{\r\n                    color: \"red\",\r\n                    fontSize: \"2rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n\r\n                <strong>{errorText}</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\Login.js",["100","101","102"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Form, Button, Toast, Spinner } from \"react-bootstrap\";\r\nimport { FaPaperPlane, FaTimes } from \"react-icons/fa\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\nexport default function Login() {\r\n  const { login, isVerified, currentUser } = useAuth();\r\n  const emailRef = useRef();\r\n  const passRef = useRef();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [verified, setVerified] = useState(true);\r\n  const [errorText, setErrorText] = useState(\"\");\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setVerified(true);\r\n    setError(false);\r\n    setSuccess(false);\r\n    setErrorText(\"\");\r\n\r\n    login(emailRef.current.value, passRef.current.value)\r\n      .then(() => {\r\n        setSuccess(true);\r\n      })\r\n      .catch((error) => {\r\n        setError(true);\r\n        setErrorText(error.message);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      setVerified(isVerified);\r\n\r\n      if (isVerified) setLoading(false);\r\n    }\r\n    // return () => {\r\n    //   cleanup;\r\n    // };\r\n  }, [success]);\r\n  return (\r\n    <div className=\"loginContainer min-vh-100 d-flex align-items-center justify-content-center flex-column\">\r\n      <FaPaperPlane className=\"paper-plane d-none d-md-block\" />\r\n      <header\r\n        style={{\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n          textShadow: \"6px 6px 2px red\",\r\n        }}\r\n      >\r\n        FlashSend\r\n      </header>\r\n      <content className=\"container d-flex justify-content-center p-4\">\r\n        <Form onSubmit={handleSubmit} className=\"col-md-6\">\r\n          <Form.Group>\r\n            <Form.Label>Email</Form.Label>\r\n            <Form.Control ref={emailRef} type=\"email\" required></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control ref={passRef} type=\"password\" required></Form.Control>\r\n            <Form.Text\r\n              className=\"text-white text-center\"\r\n              style={{ fontSize: \".9rem\" }}\r\n            >\r\n              Forgot your password?{\" \"}\r\n              <Link to=\"/reset-password\" className=\"text-danger\">\r\n                Reset\r\n              </Link>\r\n            </Form.Text>\r\n          </Form.Group>\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"bg-light text-dark font-weight-bold w-100 mt-4 mb-2\"\r\n            style={{\r\n              borderRadius: \"0\",\r\n              boxShadow: \"6px 6px 2px red\",\r\n              fontSize: \"1.2rem\",\r\n            }}\r\n          >\r\n            Login\r\n          </Button>\r\n\r\n          <small className=\"text-white\" style={{ fontSize: \".9rem\" }}>\r\n            New to FlashSend?{\" \"}\r\n            <Link to=\"/signup\" className=\"text-danger\">\r\n              Create an account\r\n            </Link>\r\n          </small>\r\n        </Form>\r\n      </content>\r\n      {/* display overlay with toasts when user creating account */}\r\n      {loading && (\r\n        <div\r\n          className=\"min-vh-100 w-100 d-flex align-items-center justify-content-center position-absolute\"\r\n          style={{ backgroundColor: \"rgba(0,0,0,0.8)\", zIndex: \"999\" }}\r\n        >\r\n          {/* display spinner as long as waiting for firebase response */}\r\n          {!error && verified && (\r\n            <Spinner animation=\"border\" role=\"status\" variant=\"danger\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n          )}\r\n          {/* display this toast if request fails */}\r\n\r\n          {(error || !verified) && (\r\n            <Toast onClose={() => setLoading(false)}>\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FaTimes\r\n                  style={{\r\n                    color: \"red\",\r\n                    fontSize: \"2rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n\r\n                <strong>\r\n                  {error\r\n                    ? errorText\r\n                    : \"You must verify your email before logging in! Instructions are included in the email we sent you with your signup!\"}\r\n                </strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\Home.js",["103","104","105","106"],"import React, { useEffect } from \"react\";\r\nimport RightColumn from \"./RightColumn\";\r\nimport LeftColumn from \"./LeftColumn\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { FirestoreAfterLoginProvider } from \"../contexts/FirestoreAfterLoginContext\";\r\nimport { firebaseRT } from \"../firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nexport default function Home() {\r\n  const { currentUser } = useAuth();\r\n\r\n  return (\r\n    <FirestoreAfterLoginProvider>\r\n      <div className=\"dashboardContainer d-flex\" style={{ maxHeigth: \"100vh\" }}>\r\n        <LeftColumn style={{ maxHeight: \"100vh\" }} />\r\n        <RightColumn style={{ maxHeight: \"100vh\" }} />\r\n      </div>\r\n    </FirestoreAfterLoginProvider>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\RightColumn.js",[],"C:\\React\\messaging-app\\src\\components\\LeftColumn.js",[],"C:\\React\\messaging-app\\src\\components\\AddContact.js",["107","108","109","110"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Form, Nav, Toast } from \"react-bootstrap\";\r\nimport {\r\n  AiOutlineSearch,\r\n  AiOutlinePlus,\r\n  AiOutlineUserAdd,\r\n} from \"react-icons/ai\";\r\nimport { BsCheck } from \"react-icons/bs\";\r\nimport { FaCheck, FaTimes } from \"react-icons/fa\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useFirestoreAfterLogin } from \"../contexts/FirestoreAfterLoginContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\nexport default function AddContact() {\r\n  const id = \"test\";\r\n  const [show, setShow] = useState(false);\r\n  const [users, setUsers] = useState([]);\r\n  const searchRef = useRef();\r\n  const { currentUser } = useAuth();\r\n  const {\r\n    getUsers,\r\n    sendFriendRequest,\r\n    friendRequests,\r\n    acceptFriendRequest,\r\n    denyFriendRequest,\r\n    getContacts,\r\n  } = useFirestoreAfterLogin();\r\n\r\n  function handleSearch() {\r\n    if (searchRef.current.value.length >= 3)\r\n      setUsers(getUsers(searchRef.current.value));\r\n    else setUsers([]);\r\n  }\r\n\r\n  function handleClick(user) {\r\n    sendFriendRequest(user);\r\n    setShow(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"addContactContainer\">\r\n      <div className=\"searchContainer px-4 pt-4\">\r\n        <Form onSubmit={(e) => e.preventDefault()}>\r\n          <Form.Group className=\"d-flex\">\r\n            <AiOutlineSearch\r\n              style={{\r\n                fontSize: \"1.4em\",\r\n                color: \"white\",\r\n                alignSelf: \"center\",\r\n              }}\r\n            />\r\n            <Form.Control\r\n              onChange={handleSearch}\r\n              ref={searchRef}\r\n              type=\"text\"\r\n              placeholder=\"Search user\"\r\n            ></Form.Control>\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n      <div className=\"resultsContainer text-light d-flex flex-column\">\r\n        {friendRequests.length > 0 && (\r\n          <>\r\n            <span className=\"lead\">Friend Requests</span>\r\n            <Nav\r\n              className=\"searchUsers d-flex flex-column flex-nowrap mt-3 mb-3\"\r\n              style={{ overflow: \"auto\" }}\r\n            >\r\n              {friendRequests.map((user, index) => {\r\n                return (\r\n                  <Nav.Link\r\n                    key={index}\r\n                    as=\"div\"\r\n                    active=\"false\"\r\n                    className=\"user d-flex px-3 text-light w-100 align-items-center\"\r\n                  >\r\n                    <img\r\n                      alt=\"thumbnail\"\r\n                      src={user.photoURL}\r\n                      style={{\r\n                        minWidth: \"40px\",\r\n                        width: \"40px\",\r\n                        height: \"40px\",\r\n                        borderRadius: \"50%\",\r\n                      }}\r\n                    ></img>\r\n                    <div className=\"text-left ml-3 d-flex justify-content-between align-items-center w-100\">\r\n                      <span>{user.displayName}</span>\r\n                      <div>\r\n                        {console.log(user)}\r\n                        <FaCheck\r\n                          style={{\r\n                            cursor: \"pointer\",\r\n                            color: \"green\",\r\n                            marginRight: \"20px\",\r\n                          }}\r\n                          onClick={() => acceptFriendRequest(user)}\r\n                        />\r\n                        <FaTimes\r\n                          style={{ cursor: \"pointer\", color: \"red\" }}\r\n                          onClick={() => denyFriendRequest(user)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Nav.Link>\r\n                );\r\n              })}\r\n            </Nav>\r\n          </>\r\n        )}\r\n\r\n        {users.length === 0 && (\r\n          <span className=\"lead\">Search for user to add</span>\r\n        )}\r\n        {users.length > 0 && <span className=\"lead\">Users</span>}\r\n        <Nav\r\n          className=\"searchUsers d-flex flex-column flex-nowrap mt-3\"\r\n          style={{ overflow: \"auto\" }}\r\n        >\r\n          {users.length > 0 &&\r\n            users.map((user, index) => {\r\n              return (\r\n                <Nav.Link\r\n                  key={index}\r\n                  as=\"div\"\r\n                  active=\"false\"\r\n                  className=\"user d-flex px-3 text-light w-100 align-items-center\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => {\r\n                    return getContacts.filter(\r\n                      (contact) => contact.uid === user.uid\r\n                    ).length > 0\r\n                      ? \"\"\r\n                      : handleClick(user);\r\n                  }}\r\n                >\r\n                  <img\r\n                    alt=\"thumbnail\"\r\n                    src={user.photoURL}\r\n                    style={{\r\n                      minWidth: \"40px\",\r\n                      width: \"40px\",\r\n                      height: \"40px\",\r\n                      borderRadius: \"50%\",\r\n                    }}\r\n                  ></img>\r\n                  <div className=\"text-left ml-3 d-flex justify-content-between align-items-center w-100\">\r\n                    <span>{user.displayName}</span>\r\n                    {getContacts.filter((contact) => contact.uid === user.uid)\r\n                      .length > 0 ? (\r\n                      <div className=\"text-right\">\r\n                        <FaCheck\r\n                          style={{ fontSize: \"1.2em\", color: \"green\" }}\r\n                        />\r\n                        <AiOutlineUserAdd\r\n                          style={{ fontSize: \"1.4em\", color: \"green\" }}\r\n                        />\r\n                      </div>\r\n                    ) : (\r\n                      <AiOutlinePlus style={{ color: \"white\" }} />\r\n                    )}\r\n                  </div>\r\n                </Nav.Link>\r\n              );\r\n            })}\r\n        </Nav>\r\n      </div>\r\n      <Toast\r\n        onClose={() => setShow(false)}\r\n        show={show}\r\n        delay={2000}\r\n        autohide\r\n        style={{\r\n          position: \"absolute\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          right: \"0\",\r\n          top: \"0\",\r\n          height: \"90px\",\r\n          margin: \"auto auto\",\r\n        }}\r\n      >\r\n        <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n          <BsCheck style={{ color: \"green\", fontSize: \"3em\" }} />\r\n          Friend request sent to the user!\r\n        </Toast.Body>\r\n      </Toast>\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\Conversations.js",["111","112"],"C:\\React\\messaging-app\\src\\components\\Contacts.js",["113"],"import React, { useState } from \"react\";\r\nimport { Form, Nav, Toast, Button, Dropdown } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport { GoPrimitiveDot } from \"react-icons/go\";\r\nimport { RiDeleteBin7Fill } from \"react-icons/ri\";\r\nimport { BiDotsHorizontalRounded } from \"react-icons/bi\";\r\nimport { useFirestoreAfterLogin } from \"../contexts/FirestoreAfterLoginContext\";\r\nimport moment from \"moment\";\r\n\r\nexport default function Contacts() {\r\n  const {\r\n    getContacts,\r\n    contactsStatus,\r\n    deleteContact,\r\n  } = useFirestoreAfterLogin();\r\n  const [userToDelete, setUsertoDelete] = useState();\r\n  const [nodeToDelete, setNodeToDelete] = useState();\r\n  const [show, setShow] = useState(false);\r\n\r\n  const id = \"test\";\r\n\r\n  function handleClick(event, user) {\r\n    setNodeToDelete(\r\n      event.target.nodeName === \"path\"\r\n        ? event.target.parentNode.parentNode.parentNode\r\n        : event.target.parentNode.parentNode\r\n    );\r\n    setShow(true);\r\n    setUsertoDelete(user);\r\n  }\r\n\r\n  return (\r\n    <div className=\"contactsContainer\">\r\n      <div className=\"searchContainer px-4 pt-4\">\r\n        <Form>\r\n          <Form.Group className=\"d-flex\">\r\n            <AiOutlineSearch\r\n              style={{\r\n                fontSize: \"1.4em\",\r\n                color: \"white\",\r\n                alignSelf: \"center\",\r\n              }}\r\n            />\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Search contact\"\r\n            ></Form.Control>\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n      <div className=\"resultsContainer text-light d-flex flex-column\">\r\n        {getContacts.length === 0 && (\r\n          <span className=\"lead\">No contacts yet!</span>\r\n        )}\r\n        {getContacts.length > 0 && <span className=\"lead\">Contacts</span>}\r\n\r\n        <Nav\r\n          className=\"conversationsUsers d-flex flex-column flex-nowrap mt-3\"\r\n          style={{ overflowY: \"auto\", overflowX: \"hidden\", minHeight: \"200px\" }}\r\n        >\r\n          {contactsStatus.length === getContacts.length &&\r\n            getContacts.map((contact, index) => {\r\n              return (\r\n                <div className=\"d-flex px-3\" key={index}>\r\n                  <Nav.Link\r\n                    as={NavLink}\r\n                    to={`/${contact.uid}`}\r\n                    active=\"false\"\r\n                    className=\"user d-flex text-light px-0 w-100 align-items-center text\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => {\r\n                      if (\r\n                        window.innerWidth < 768 ||\r\n                        window.screen.width < 768\r\n                      ) {\r\n                        document.querySelector(\".rightColumn\").style.zIndex =\r\n                          \"99\";\r\n                      }\r\n                    }}\r\n                  >\r\n                    <img\r\n                      alt=\"portrait\"\r\n                      src={contact.photoURL}\r\n                      style={{\r\n                        minWidth: \"40px\",\r\n                        width: \"40px\",\r\n                        height: \"40px\",\r\n                        borderRadius: \"50%\",\r\n                      }}\r\n                    ></img>\r\n                    <div className=\"text-left ml-3\">\r\n                      <span>{contact.displayName}</span>\r\n                      <div>\r\n                        <GoPrimitiveDot\r\n                          style={{\r\n                            color:\r\n                              contactsStatus[index].state === \"online\"\r\n                                ? \"green\"\r\n                                : \"red\",\r\n                          }}\r\n                        />\r\n\r\n                        <span style={{ fontSize: \".8rem\" }}>\r\n                          {contactsStatus[index].state === \"online\"\r\n                            ? \"Online\"\r\n                            : `Last seen ${moment\r\n                                .unix(\r\n                                  contactsStatus[index].last_changed.seconds\r\n                                )\r\n                                .startOf(\"minute\")\r\n                                .fromNow()}`}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </Nav.Link>\r\n                  <div className=\"contactSettings ml-auto align-self-start\">\r\n                    <Dropdown>\r\n                      <Dropdown.Toggle as=\"div\" id=\"chatSettingsDropdown\">\r\n                        <BiDotsHorizontalRounded\r\n                          style={{\r\n                            fontSize: \"1.3em\",\r\n                            color: \"white\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                        />\r\n                      </Dropdown.Toggle>\r\n\r\n                      <Dropdown.Menu style={{ zIndex: \"99\" }}>\r\n                        <Dropdown.Item\r\n                          to=\"/\"\r\n                          as={NavLink}\r\n                          className=\"d-flex align-items-center text-danger\"\r\n                          onClick={(event) => {\r\n                            handleClick(event, contact);\r\n                          }}\r\n                        >\r\n                          <RiDeleteBin7Fill\r\n                            style={{ fontSize: \"1.4em\", marginRight: \".5rem\" }}\r\n                          />\r\n                          Delete contact\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n        </Nav>\r\n      </div>\r\n      <Toast\r\n        onClose={() => setShow(false)}\r\n        show={show}\r\n        style={{\r\n          position: \"fixed\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          right: \"0\",\r\n          top: \"0\",\r\n          height: \"150px\",\r\n          margin: \"auto auto\",\r\n        }}\r\n      >\r\n        <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n          <p className=\"lead\">\r\n            Are you sure that you want to delete the contact?\r\n          </p>\r\n          <div>\r\n            <Button\r\n              variant=\"success\"\r\n              className=\"mr-3 px-4\"\r\n              onClick={() => {\r\n                // console.log(userToDelete, nodeToDelete);\r\n                deleteContact(userToDelete).then(() => {\r\n                  nodeToDelete.remove();\r\n                  setShow(false);\r\n                });\r\n              }}\r\n            >\r\n              Yes\r\n            </Button>\r\n            <Button\r\n              variant=\"danger\"\r\n              className=\"px-4\"\r\n              onClick={() => setShow(false)}\r\n            >\r\n              No\r\n            </Button>\r\n          </div>\r\n        </Toast.Body>\r\n      </Toast>\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\ConversationLayout.js",["114","115","116","117"],"import React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport { GoPrimitiveDot } from \"react-icons/go\";\r\nimport { IoIosSettings, IoIosArrowBack } from \"react-icons/io\";\r\nimport { RiDeleteBin7Fill } from \"react-icons/ri\";\r\nimport { AiOutlinePlus } from \"react-icons/ai\";\r\nimport { Dropdown, Form, Toast, Spinner, InputGroup } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useFirestoreAfterLogin } from \"../contexts/FirestoreAfterLoginContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport moment from \"moment\";\r\n\r\nexport default function ConversationLayout() {\r\n  const [show, setShow] = useState(false);\r\n  const [contactData, setContactData] = useState();\r\n  const [prevContactData, setPrevContactData] = useState([]);\r\n  const { id } = useParams();\r\n  const messageRef = useRef();\r\n  let limit = 0;\r\n  const {\r\n    getContacts,\r\n    contactsStatus,\r\n    sendMessage,\r\n    messages,\r\n    getMessages,\r\n    getAllMessages,\r\n    allMessagesLength,\r\n    allMessages,\r\n    setHasMessages,\r\n    setLastMessage,\r\n  } = useFirestoreAfterLogin();\r\n  const { currentUser } = useAuth();\r\n  useEffect(() => {\r\n    if (document.querySelector(\".basicLayoutContainer\")) {\r\n      if (window.innerWidth > 768 || window.screen.width > 768) {\r\n        document.querySelector(\".messages\").style.height =\r\n          window.innerHeight - 94 - 76 + \"px\";\r\n        window.addEventListener(\r\n          \"resize\",\r\n          () =>\r\n            (document.querySelector(\".messages\").style.height =\r\n              window.innerHeight - 94 - 76 + \"px\")\r\n        );\r\n      } else\r\n        document.querySelector(\".messages\").style.height =\r\n          window.innerHeight - 102 - 76 + \"px\";\r\n    }\r\n\r\n    return window.removeEventListener(\"resize\", function () {});\r\n  }, [contactData]);\r\n\r\n  useEffect(() => {\r\n    if (getContacts.length > 0 && contactsStatus.length > 0) {\r\n      const tempStatus = contactsStatus.filter((contact) => contact.uid === id);\r\n      const tempData = getContacts.filter((contact) => contact.uid === id);\r\n      tempData[0].state = tempStatus[0].state;\r\n      tempData[0].last_changed = tempStatus[0].last_changed;\r\n      setContactData(...tempData);\r\n    }\r\n  }, [id, getContacts, contactsStatus]);\r\n\r\n  useEffect(() => {\r\n    if (contactData && contactData !== prevContactData) {\r\n      getAllMessages(contactData);\r\n      // getMessages();\r\n      setPrevContactData(contactData);\r\n    }\r\n  }, [contactData]);\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setLastMessage(contactData, messageRef.current.value);\r\n    sendMessage(messageRef.current.value, contactData).then(() => {\r\n      if (allMessagesLength === 0) setHasMessages(contactData);\r\n    });\r\n  }\r\n\r\n  async function handleKeyPress(e) {\r\n    if (e.which === 13 && !e.shiftKey) {\r\n      await handleSubmit(e);\r\n      messageRef.current.value = \"\";\r\n    }\r\n  }\r\n  let height;\r\n  const observer = useRef();\r\n  const lastMessageElementRef = useCallback(\r\n    (node) => {\r\n      if (node !== null) height = node.offsetTop;\r\n      if (observer.current) observer.current.disconnect();\r\n      observer.current = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          if (limit + 20 < allMessagesLength) {\r\n            limit = limit + 20;\r\n\r\n            getMessages(limit, allMessages);\r\n\r\n            const divHeight = document.querySelector(\".messages div\").offsetTop;\r\n\r\n            document.querySelector(\".messages\").scrollTop = divHeight - height;\r\n          }\r\n          // setLimit((prevLimit) => prevLimit + 20);\r\n        }\r\n        // console.log(allMessagesLength);\r\n      });\r\n      if (node) observer.current.observe(node);\r\n    },\r\n    [allMessagesLength, allMessages]\r\n  );\r\n\r\n  function timeDifference(date1, date2) {\r\n    var difference = date1 - date2;\r\n    var minutesDifference = Math.floor(difference / 1000 / 60);\r\n    return minutesDifference;\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-100\">\r\n      {contactData === undefined && (\r\n        <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n          <Spinner animation=\"border\" role=\"status\" variant=\"danger\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      )}\r\n      {contactData && (\r\n        <div className=\"basicLayoutContainer w-100\">\r\n          <div\r\n            active=\"false\"\r\n            className=\"topHeader d-flex px-3 w-100 text-light py-2 justify-content-between align-items-center\"\r\n            style={{ backgroundColor: \"#1e2124\" }}\r\n          >\r\n            <div className=\"leftSide d-flex align-items-center\">\r\n              <IoIosArrowBack\r\n                className=\"d-md-none\"\r\n                style={{\r\n                  fontSize: \"2em\",\r\n                  marginRight: \"1rem\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n                onClick={() => {\r\n                  if (window.innerWidth < 768 || window.screen.width < 768) {\r\n                    document.querySelector(\".rightColumn\").style.zIndex = \"1\";\r\n                  }\r\n                }}\r\n              />\r\n              <img\r\n                alt=\"portrait\"\r\n                src={contactData.photoURL}\r\n                style={{ width: \"60px\", height: \"60px\", borderRadius: \"50%\" }}\r\n              ></img>\r\n              <div className=\"text-left ml-3\">\r\n                <span style={{ fontSize: \"1.3rem\" }}>\r\n                  {window.innerWidth > 768\r\n                    ? `Chat with ${contactData.displayName}`\r\n                    : contactData.displayName}\r\n                </span>\r\n                <div>\r\n                  <GoPrimitiveDot\r\n                    style={{\r\n                      color: contactData.state === \"online\" ? \"green\" : \"red\",\r\n                    }}\r\n                  />\r\n                  <span style={{ fontSize: \".8rem\" }}>\r\n                    {contactData.state === \"online\" ? \"Online\" : `Last seen`}{\" \"}\r\n                    {contactData !== undefined && contactData.state !== \"online\"\r\n                      ? moment\r\n                          .unix(contactData.last_changed.seconds)\r\n                          .startOf(\"minute\")\r\n                          .fromNow()\r\n                      : \"\"}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"rightSide\">\r\n              <Dropdown>\r\n                <Dropdown.Toggle\r\n                  style={{\r\n                    all: \"initial\",\r\n                  }}\r\n                  id=\"chatSettingsDropdown\"\r\n                >\r\n                  <IoIosSettings\r\n                    className=\"text-danger\"\r\n                    style={{ fontSize: \"2em\", cursor: \"pointer\" }}\r\n                  />\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item\r\n                    href=\"#/action-1\"\r\n                    className=\"d-flex align-items-center text-danger\"\r\n                  >\r\n                    <RiDeleteBin7Fill\r\n                      style={{ fontSize: \"1.4em\", marginRight: \".5rem\" }}\r\n                    />\r\n                    Delete conversation\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    href=\"#/action-2\"\r\n                    className=\"d-flex align-items-center text-dark\"\r\n                    onClick={() => setShow(true)}\r\n                  >\r\n                    <AiOutlinePlus\r\n                      style={{ fontSize: \"1.4em\", marginRight: \".5rem\" }}\r\n                    />\r\n                    Add person to the conversation\r\n                  </Dropdown.Item>\r\n                  {/* <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\r\n              <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item> */}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={`messages d-flex flex-column-reverse flex-nowrap px-3`}\r\n            style={{ overflow: \"auto\" }}\r\n          >\r\n            {/* {document.querySelector(\".messages\") && lastMessageElementRef\r\n              ? console.log(document.querySelector(\".messages div\").offsetTop)\r\n              : \"\"} */}\r\n            <div className=\"d-flex flex-column \">\r\n              {messages &&\r\n                messages\r\n                  .slice(0)\r\n                  .reverse()\r\n                  .map((message, index, messagesArray) => {\r\n                    if (index === 0)\r\n                      return (\r\n                        <div\r\n                          className={`messageContainer d-flex flex-column text-light ${\r\n                            message.user === currentUser.displayName\r\n                              ? \"text-right \"\r\n                              : \"text-left\"\r\n                          }`}\r\n                          key={index}\r\n                          ref={lastMessageElementRef}\r\n                        >\r\n                          <span>\r\n                            {message.user === currentUser.displayName\r\n                              ? \"You\"\r\n                              : message.user.substr(\r\n                                  0,\r\n                                  message.user.indexOf(\" \")\r\n                                )}\r\n                          </span>\r\n\r\n                          <div\r\n                            className={`message py-2 px-3 text-left ${\r\n                              message.user === currentUser.displayName\r\n                                ? \"bg-danger text-left align-self-end\"\r\n                                : \"bg-light text-dark text-left align-self-start\"\r\n                            }`}\r\n                            style={{\r\n                              width: \"auto\",\r\n                              maxWidth: \"70%\",\r\n                              borderRadius: \"1rem\",\r\n                            }}\r\n                          >\r\n                            <span className=\"mx-auto\">{message.message}</span>\r\n                          </div>\r\n\r\n                          <small>\r\n                            {message.time\r\n                              ? moment.unix(message.time.seconds).calendar()\r\n                              : \"\"}\r\n                          </small>\r\n                        </div>\r\n                      );\r\n                    else\r\n                      return (\r\n                        <div\r\n                          className={`messageContainer d-flex flex-column text-light ${\r\n                            message.user === currentUser.displayName\r\n                              ? \"text-right \"\r\n                              : \"text-left\"\r\n                          }`}\r\n                          key={index}\r\n                          id={`message${index}`}\r\n                        >\r\n                          <span>\r\n                            {message.user !== messagesArray[index - 1].user\r\n                              ? message.user === currentUser.displayName\r\n                                ? \"You\"\r\n                                : message.user.substr(\r\n                                    0,\r\n                                    message.user.indexOf(\" \")\r\n                                  )\r\n                              : \"\"}\r\n                          </span>\r\n\r\n                          <div\r\n                            className={`message py-2 px-3 text-left ${\r\n                              message.user === currentUser.displayName\r\n                                ? \"bg-danger text-left align-self-end\"\r\n                                : \"bg-light text-dark text-left align-self-start\"\r\n                            }`}\r\n                            style={{\r\n                              width: \"auto\",\r\n                              maxWidth: \"70%\",\r\n                              borderRadius: \"1rem\",\r\n                            }}\r\n                          >\r\n                            <span className=\"mx-auto\">{message.message}</span>\r\n                          </div>\r\n\r\n                          <small>\r\n                            {/* {message.user === messagesArray[index - 1].user &&\r\n                              moment\r\n                                .duration(\r\n                                  moment\r\n                                    .unix(message.time.seconds)\r\n                                    .diff(\r\n                                      moment.unix(\r\n                                        messagesArray[index - 1].time.seconds\r\n                                      )\r\n                                    )\r\n                                )\r\n                                .minutes() >= 5 &&\r\n                              message.time &&\r\n                              document.querySelector(\r\n                                `.messageContainer#message${index - 1} small`\r\n                              ) &&\r\n                              document\r\n                                .querySelector(\r\n                                  `.messageContainer#message${index - 1} small`\r\n                                )\r\n                                .remove()} */}\r\n                            {/* {message.user === messagesArray[index - 1].user\r\n                              ? moment\r\n                                  .duration(\r\n                                    moment\r\n                                      .unix(message.time.seconds)\r\n                                      .diff(\r\n                                        moment.unix(\r\n                                          messagesArray[index - 1].time.seconds\r\n                                        )\r\n                                      )\r\n                                  )\r\n                                  .minutes() >= 5\r\n                                ? message.time\r\n                                  ? moment.unix(message.time.seconds).calendar()\r\n                                  : \"\"\r\n                                : \"\"\r\n                              : message.time\r\n                              ? moment.unix(message.time.seconds).calendar()\r\n                              : \"\"} */}\r\n                            {message.time\r\n                              ? moment.unix(message.time.seconds).calendar()\r\n                              : \"\"}\r\n                          </small>\r\n                        </div>\r\n                      );\r\n                  })}\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"newMessage align-items-center w-100 p-2 px-md-4 py-md-3\"\r\n            style={{ backgroundColor: \"#dcdcdc\" }}\r\n          >\r\n            <Form onSubmit={handleSubmit} className=\"d-flex\">\r\n              <InputGroup className=\"w-100\">\r\n                <Form.Control\r\n                  ref={messageRef}\r\n                  as=\"textarea\"\r\n                  onKeyPress={handleKeyPress}\r\n                  rows={window.innerWidth > 768 ? 2 : 3}\r\n                  placeholder=\"Type your message here\"\r\n                  style={{ resize: \"none\" }}\r\n                />\r\n                <InputGroup.Append>\r\n                  <Button type=\"submit\" variant=\"danger\" className=\"w-100\">\r\n                    Send\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n              {/* <div className=\"d-md-flex align-items-center\"></div> */}\r\n            </Form>\r\n          </div>\r\n          <Toast\r\n            onClose={() => setShow(false)}\r\n            show={show}\r\n            style={{\r\n              position: \"absolute\",\r\n              bottom: \"0\",\r\n              left: \"0\",\r\n              right: \"0\",\r\n              top: \"0\",\r\n              height: \"250px\",\r\n              margin: \"auto auto\",\r\n            }}\r\n          >\r\n            <Toast.Header>\r\n              <strong className=\"mr-auto\">Add person</strong>\r\n            </Toast.Header>\r\n            <Toast.Body style={{ height: \"220px\" }}>\r\n              <div\r\n                className=\"addFriendToConversationContainer d-flex flex-column h-100\"\r\n                style={{ overflow: \"auto\" }}\r\n              >\r\n                <span>test</span>\r\n                <span>test</span>\r\n                <span>test</span>\r\n                <span>test</span>\r\n                <span>test</span>\r\n                <span>test</span>\r\n                <span>test</span>\r\n                <span>test</span>\r\n                <span>test</span>\r\n                <span>test</span>\r\n                <span>test</span>\r\n              </div>\r\n            </Toast.Body>\r\n          </Toast>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\PrivateRoute.js",["118"],"import React, { useEffect } from \"react\";\r\nimport { Redirect, Route, useLocation } from \"react-router-dom\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n  const location = useLocation();\r\n  const loginPathName = \"/login\";\r\n  const signUpPathName = \"/signup\";\r\n  const forgotPasswordName = \"/reset-password\";\r\n  const { isVerified, currentUser } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        return isVerified && currentUser ? (\r\n          location.pathname === loginPathName ||\r\n          location.pathname === signUpPathName ||\r\n          location.pathname === forgotPasswordName ? (\r\n            <Redirect to=\"/\" />\r\n          ) : (\r\n            <Component {...props} />\r\n          )\r\n        ) : location.pathname === loginPathName ||\r\n          location.pathname === signUpPathName ||\r\n          location.pathname === forgotPasswordName ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/login\" />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\Settings.js",["119"],"import React from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { IoIosArrowForward } from \"react-icons/io\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\nexport default function Settings() {\r\n  const { logout } = useAuth();\r\n  const history = useHistory();\r\n  async function handleLogout() {\r\n    try {\r\n      await logout();\r\n      localStorage.clear();\r\n      window.location.href = \"/\";\r\n    } catch {\r\n      console.log(\"error\");\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"settingsContainer text-light d-flex flex-column\">\r\n      <span className=\"lead mt-3\">Settings</span>\r\n      <Nav\r\n        className=\"d-flex flex-column flex-nowrap mt-3\"\r\n        style={{ overflow: \"auto\" }}\r\n      >\r\n        <Nav.Link\r\n          as={NavLink}\r\n          to={`/edit-profile`}\r\n          active=\"false\"\r\n          className=\"user d-flex px-3 text-light w-100 justify-content-between align-items-center\"\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          Edit Profile\r\n          <IoIosArrowForward style={{ fontSize: \"1.2em\" }} />\r\n        </Nav.Link>\r\n        <Nav.Link\r\n          as=\"div\"\r\n          onClick={handleLogout}\r\n          active=\"false\"\r\n          className=\"user d-flex px-3 text-light w-100 align-items-center\"\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          Logout\r\n        </Nav.Link>\r\n      </Nav>\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\EditProfile.js",["120","121","122"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Toast,\r\n  Spinner,\r\n  ProgressBar,\r\n} from \"react-bootstrap\";\r\nimport { BsBoxArrowInUp, BsArrowLeftShort } from \"react-icons/bs\";\r\nimport { FaTimes, FaCheck } from \"react-icons/fa\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { useFirestoreBeforeLogin } from \"../contexts/FirestoreBeforeLoginContext\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\n\r\nexport default function EditProfile() {\r\n  const {\r\n    updateEmail,\r\n    updatePassword,\r\n    updateProfile,\r\n    sendEmailVerification,\r\n    currentUser,\r\n  } = useAuth();\r\n  const { updateUser } = useFirestoreBeforeLogin();\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [lengthError, setLengthError] = useState(false);\r\n  const [matchingError, setMatchingError] = useState(false);\r\n  const [errorText, setErrorText] = useState(\"\");\r\n  const [uploadLoading, setUploadLoading] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const prevEmail = currentUser.email;\r\n  const history = useHistory();\r\n  const fileRef = useRef();\r\n  const nameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passRef = useRef();\r\n  const confPassRef = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setError(false);\r\n    setLengthError(false);\r\n    setMatchingError(false);\r\n    setSuccess(false);\r\n    setUploadLoading(false);\r\n\r\n    //initial checks for password requirements\r\n    if (passRef.current.value !== \"\" && passRef.current.value.length < 6) {\r\n      setLengthError(true);\r\n      passRef.current.focus();\r\n      return;\r\n    }\r\n    if (passRef.current.value !== confPassRef.current.value) {\r\n      setMatchingError(true);\r\n      passRef.current.focus();\r\n      return;\r\n    }\r\n\r\n    let promises = [];\r\n    //first uploadImage as a promise if a file is selected.\r\n    if (fileRef.current.files.length > 0) {\r\n      setLoading(true);\r\n      promises.push(\r\n        new Promise((resolve, reject) =>\r\n          uploadImage(\r\n            fileRef.current.files[0],\r\n            currentUser.uid,\r\n            resolve,\r\n            reject\r\n          )\r\n        )\r\n      );\r\n    }\r\n    //if promise has items (in our case if uploadImage called)\r\n    if (promises.length > 0)\r\n      //wait uploadImage to execute\r\n      Promise.all(promises).then((values) => {\r\n        promises = [];\r\n        //store imageurl\r\n        const resolveURL = values[0];\r\n        //check for changes in displayName, if so update\r\n        if (\r\n          nameRef.current.value !== currentUser.displayName ||\r\n          fileRef.current.files.length > 0\r\n        ) {\r\n          promises.push(\r\n            updateProfile(currentUser, {\r\n              name: nameRef.current.value,\r\n              url: resolveURL,\r\n            })\r\n          );\r\n\r\n          promises.push(\r\n            updateUser({\r\n              uid: currentUser.uid,\r\n              displayName: nameRef.current.value,\r\n              photoURL: resolveURL,\r\n            })\r\n          );\r\n        }\r\n        //check for changes in email, is so update\r\n        if (emailRef.current.value !== currentUser.email) {\r\n          promises.push(updateEmail(emailRef.current.value));\r\n        }\r\n        //check for changes in password, if so update\r\n        if (passRef.current.value !== \"\")\r\n          promises.push(updatePassword(passRef.current.value));\r\n\r\n        //wait all these functions to execute\r\n        Promise.all(promises)\r\n          .then(() => {\r\n            //if email changed send verification mail to new mail address\r\n            if (prevEmail !== currentUser.email) {\r\n              sendEmailVerification(currentUser);\r\n            }\r\n\r\n            setSuccess(true);\r\n            setTimeout(() => {\r\n              setLoading(false);\r\n            }, 3000);\r\n          })\r\n          .catch((error) => {\r\n            setError(true);\r\n            setErrorText(error.message);\r\n          });\r\n      });\r\n    //if uploadImage didnt called do the same checks for the other account info,and execute functions\r\n    else {\r\n      if (nameRef.current.value !== currentUser.displayName) {\r\n        promises.push(\r\n          updateProfile(currentUser, {\r\n            name: nameRef.current.value,\r\n          })\r\n        );\r\n        promises.push(\r\n          updateUser({\r\n            uid: currentUser.uid,\r\n            displayName: nameRef.current.value,\r\n            photoURL: currentUser.photoURL,\r\n          })\r\n        );\r\n      }\r\n\r\n      if (emailRef.current.value !== currentUser.email) {\r\n        promises.push(updateEmail(emailRef.current.value));\r\n      }\r\n\r\n      if (passRef.current.value !== \"\")\r\n        promises.push(updatePassword(passRef.current.value));\r\n\r\n      if (promises.length > 0) {\r\n        setLoading(true);\r\n        Promise.all(promises)\r\n          .then(() => {\r\n            if (prevEmail !== currentUser.email)\r\n              sendEmailVerification(currentUser);\r\n            setSuccess(true);\r\n            setTimeout(() => {\r\n              setLoading(false);\r\n            }, 3000);\r\n          })\r\n          .catch((error) => {\r\n            setError(true);\r\n            setErrorText(error.message);\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleChange() {\r\n    const fr = new FileReader();\r\n    fr.onload = function () {\r\n      document.querySelector(\".profImage\").src = fr.result;\r\n    };\r\n    fr.readAsDataURL(fileRef.current.files[0]);\r\n  }\r\n\r\n  function uploadImage(file, uid, resolve, reject) {\r\n    var storageRef = firebase.storage().ref();\r\n    const metadata = {\r\n      contentType: file.type,\r\n    };\r\n    const uploadTask = storageRef\r\n      .child(`flashsend/${uid}/profilePic/${file.name}`)\r\n      .put(file, metadata);\r\n    setUploadLoading(true);\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      function (snapshot) {\r\n        // Observe state change events such as progress, pause, and resume\r\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n        setProgress(progress);\r\n        console.log(\"Upload is \" + progress + \"% done\");\r\n      },\r\n      function (error) {\r\n        reject();\r\n        // Handle unsuccessful uploads\r\n      },\r\n      function () {\r\n        // Handle successful uploads on complete\r\n        // For instance, get the download URL: https://firebasestorage.googleapis.com/...\r\n        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n          console.log(\"File available at\", downloadURL);\r\n\r\n          setUploadLoading(false);\r\n          resolve(downloadURL);\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"editProfileContainer min-vh-100 d-flex align-items-center justify-content-center flex-column\">\r\n      <Link to=\"/\">\r\n        <BsArrowLeftShort\r\n          style={{\r\n            position: \"absolute\",\r\n            fontSize: \"3em\",\r\n            top: \"5%\",\r\n            left: \"5%\",\r\n            color: \"white\",\r\n          }}\r\n        />\r\n      </Link>\r\n\r\n      <header\r\n        style={{\r\n          fontSize: \"3rem\",\r\n          color: \"white\",\r\n          textShadow: \"2px 2px 2px red\",\r\n        }}\r\n      >\r\n        Profile\r\n      </header>\r\n      <Container className=\"d-flex justify-content-center p-4\">\r\n        <Form onSubmit={handleSubmit}>\r\n          <Row className=\"w-100 mx-0\">\r\n            <Col md={12} className=\"d-flex justify-content-center mb-4\">\r\n              <Form.Group\r\n                className=\"col-5 d-flex justify-content-center\"\r\n                style={{ position: \"relative\", overflow: \"initial\" }}\r\n              >\r\n                <Form.Label\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    position: \"relative\",\r\n                    overflow: \"initial\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    className=\"profImage\"\r\n                    style={{\r\n                      width: \"150px\",\r\n                      height: \"150px\",\r\n                      borderRadius: \"50%\",\r\n                    }}\r\n                    src={\r\n                      currentUser.photoURL\r\n                        ? currentUser.photoURL\r\n                        : \"https://firebasestorage.googleapis.com/v0/b/flashsend-ece71.appspot.com/o/blank-profile-picture-973460_640.png?alt=media&token=aaa87789-49e5-477d-897a-ab83ce57ccc7\"\r\n                    }\r\n                  />\r\n                  <div\r\n                    className=\"profilePhotoOverlay\"\r\n                    style={{ display: \"none\" }}\r\n                  >\r\n                    <BsBoxArrowInUp\r\n                      style={{\r\n                        fontSize: \"3em\",\r\n                        position: \"absolute\",\r\n                        left: \"0\",\r\n                        right: \"0\",\r\n                        top: \"0\",\r\n                        bottom: \"0\",\r\n                        margin: \"auto\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <Form.Control\r\n                    onChange={handleChange}\r\n                    ref={fileRef}\r\n                    type=\"file\"\r\n                    style={{ opacity: \"0\", position: \"absolute\", zIndex: \"-1\" }}\r\n                  ></Form.Control>\r\n                </Form.Label>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Form.Group>\r\n                <Form.Label>Full Name</Form.Label>\r\n                <Form.Control\r\n                  ref={nameRef}\r\n                  type=\"text\"\r\n                  defaultValue={currentUser.displayName}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Form.Group>\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control\r\n                  ref={emailRef}\r\n                  type=\"text\"\r\n                  defaultValue={currentUser.email}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Form.Group>\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control ref={passRef} type=\"password\"></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Form.Group>\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control ref={confPassRef} type=\"password\"></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={12}>\r\n              <Form.Text className=\"text-light\">\r\n                <em>\r\n                  Fill password field, only if you want to change your password.\r\n                  Else leave it blank.\r\n                </em>\r\n              </Form.Text>\r\n            </Col>\r\n            <Col md={12} className=\"mt-3\">\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"bg-light text-dark font-weight-bold mt-4 mb-2\"\r\n                style={{\r\n                  borderRadius: \"0\",\r\n                  boxShadow: \"4px 4px 2px red\",\r\n                  fontSize: \"1.2rem\",\r\n                }}\r\n              >\r\n                Update\r\n              </Button>\r\n\r\n              {/* display toast if password contains less than 6 characters */}\r\n              {lengthError && (\r\n                <Toast className=\"mx-auto mt-4\">\r\n                  <Toast.Body className=\"bg-danger text-light\">\r\n                    <strong>Password should be at least 6 characters</strong>\r\n                  </Toast.Body>\r\n                </Toast>\r\n              )}\r\n              {/* display toast if passwords doesnt match */}\r\n              {matchingError && (\r\n                <Toast className=\"mx-auto mt-4\">\r\n                  <Toast.Body className=\"bg-danger text-light\">\r\n                    <strong>Passwords do not match</strong>\r\n                  </Toast.Body>\r\n                </Toast>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Container>\r\n      {/* display overlay with toasts when user creating account */}\r\n      {loading && (\r\n        <div\r\n          className=\"min-vh-100 w-100 d-flex align-items-center justify-content-center position-absolute\"\r\n          style={{ backgroundColor: \"rgba(0,0,0,0.8)\", zIndex: \"999\" }}\r\n        >\r\n          {/* display spinner as long as waiting for firebase response */}\r\n          {!success && !error && !uploadLoading && (\r\n            <Spinner animation=\"border\" role=\"status\" variant=\"danger\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n          )}\r\n          {/* display this toast if image is uploading \\\\*/}\r\n          {uploadLoading && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => {\r\n                setLoading(false);\r\n              }}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column\">\r\n                <strong className=\"my-3\">Uploading Profile Image...</strong>\r\n                <ProgressBar animated variant=\"danger\" now={progress} />\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n          {/* display this toast if response is success */}\r\n          {success && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => {\r\n                setLoading(false);\r\n              }}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FaCheck\r\n                  style={{\r\n                    color: \"green\",\r\n                    fontSize: \"2rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n                <strong>You profile information updated successfully</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n          {/* display this toast if request fails */}\r\n          {error && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => setLoading(false)}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FaTimes\r\n                  style={{\r\n                    color: \"red\",\r\n                    fontSize: \"2rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n\r\n                <strong>{errorText}</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\contexts\\AuthContext.js",["123","124"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { auth, firebaseRT, firebaseDB } from \"../firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n\r\n  function signup(email, password) {\r\n    return auth.createUserWithEmailAndPassword(email, password);\r\n  }\r\n\r\n  function sendEmailVerification(user) {\r\n    return user.sendEmailVerification();\r\n  }\r\n\r\n  async function login(email, password) {\r\n    return await auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then(() => firebaseRT.goOnline());\r\n  }\r\n\r\n  function logout() {\r\n    firebaseRT.goOffline();\r\n    return auth.signOut();\r\n  }\r\n\r\n  function updateProfile(user, props) {\r\n    return user.updateProfile({\r\n      displayName: props.name,\r\n      photoURL: props.url,\r\n    });\r\n  }\r\n\r\n  function updateEmail(email) {\r\n    return currentUser.updateEmail(email);\r\n  }\r\n\r\n  function updatePassword(password) {\r\n    return currentUser.updatePassword(password);\r\n  }\r\n\r\n  function resetPassword(email) {\r\n    return auth.sendPasswordResetEmail(email);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      setIsVerified(false);\r\n      setCurrentUser(user);\r\n      if (user) {\r\n        if (user.emailVerified) setIsVerified(true);\r\n        else {\r\n          auth.signOut();\r\n        }\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) FBRealTimePresence(currentUser);\r\n  }, [currentUser]);\r\n\r\n  const value = {\r\n    currentUser,\r\n    isVerified,\r\n    signup,\r\n    sendEmailVerification,\r\n    updateProfile,\r\n    updateEmail,\r\n    updatePassword,\r\n    resetPassword,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nfunction FBRealTimePresence(user) {\r\n  // Create a reference to this user's specific status node.\r\n  // This is where we will store data about being online/offline.\r\n  var userStatusDatabaseRef = firebaseRT.ref(\"/status/\" + user.uid);\r\n\r\n  // We'll create two constants which we will write to\r\n  // the Realtime database when this device is offline\r\n  // or online.\r\n  var isOfflineForDatabase = {\r\n    state: \"offline\",\r\n    last_changed: firebase.database.ServerValue.TIMESTAMP,\r\n  };\r\n\r\n  var isOnlineForDatabase = {\r\n    state: \"online\",\r\n    last_changed: firebase.database.ServerValue.TIMESTAMP,\r\n  };\r\n\r\n  // Create a reference to the special '.info/connected' path in\r\n  // Realtime Database. This path returns `true` when connected\r\n  // and `false` when disconnected.\r\n  firebaseRT.ref(\".info/connected\").on(\"value\", function (snapshot) {\r\n    // If we're not currently connected, don't do anything.\r\n    if (snapshot.val() == false) {\r\n      return;\r\n    }\r\n\r\n    // If we are currently connected, then use the 'onDisconnect()'\r\n    // method to add a set which will only trigger once this\r\n    // client has disconnected by closing the app,\r\n    // losing internet, or any other means.\r\n    userStatusDatabaseRef\r\n      .onDisconnect()\r\n      .set(isOfflineForDatabase)\r\n      .then(function () {\r\n        // The promise returned from .onDisconnect().set() will\r\n        // resolve as soon as the server acknowledges the onDisconnect()\r\n        // request, NOT once we've actually disconnected:\r\n        // https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect\r\n\r\n        // We can now safely set ourselves as 'online' knowing that the\r\n        // server will mark us as offline once we lose connection.\r\n        userStatusDatabaseRef.set(isOnlineForDatabase);\r\n      });\r\n  });\r\n\r\n  var userStatusFirestoreRef = firebaseDB.doc(\"/status/\" + user.uid);\r\n\r\n  // Firestore uses a different server timestamp value, so we'll\r\n  // create two more constants for Firestore state.\r\n  var isOfflineForFirestore = {\r\n    state: \"offline\",\r\n    last_changed: firebase.firestore.FieldValue.serverTimestamp(),\r\n  };\r\n\r\n  var isOnlineForFirestore = {\r\n    state: \"online\",\r\n    last_changed: firebase.firestore.FieldValue.serverTimestamp(),\r\n  };\r\n\r\n  firebaseRT.ref(\".info/connected\").on(\"value\", function (snapshot) {\r\n    if (snapshot.val() == false) {\r\n      // Instead of simply returning, we'll also set Firestore's state\r\n      // to 'offline'. This ensures that our Firestore cache is aware\r\n      // of the switch to 'offline.'\r\n      userStatusFirestoreRef.set(isOfflineForFirestore);\r\n      return;\r\n    }\r\n\r\n    userStatusDatabaseRef\r\n      .onDisconnect()\r\n      .set(isOfflineForDatabase)\r\n      .then(function () {\r\n        userStatusDatabaseRef.set(isOnlineForDatabase);\r\n\r\n        // We'll also add Firestore set here for when we come online.\r\n        userStatusFirestoreRef.set(isOnlineForFirestore);\r\n      });\r\n  });\r\n}\r\n","C:\\React\\messaging-app\\src\\firebase.js",[],"C:\\React\\messaging-app\\src\\components\\ForgotPassword.js",[],"C:\\React\\messaging-app\\src\\contexts\\FirestoreBeforeLoginContext.js",["125","126","127"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { firebaseDB } from \"../firebase\";\r\nimport { useAuth } from \"./AuthContext\";\r\n\r\nconst FirestoreBeforeLoginContext = React.createContext();\r\n\r\nexport function useFirestoreBeforeLogin() {\r\n  return useContext(FirestoreBeforeLoginContext);\r\n}\r\n\r\nexport function FirestoreBeforeLoginProvider({ children }) {\r\n  const { currentUser } = useAuth();\r\n\r\n  async function createUser(user) {\r\n    return await firebaseDB\r\n      .collection(\"users\")\r\n      .doc(user.uid)\r\n      .set({\r\n        displayName: user.displayName,\r\n        photoURL: user.photoURL,\r\n      })\r\n      .then(() => {\r\n        firebaseDB\r\n          .collection(\"status\")\r\n          .doc(user.uid)\r\n          .set({ state: null, last_changed: null })\r\n          .then(() => {\r\n            firebaseDB\r\n              .collection(\"messages\")\r\n              .doc(user.uid)\r\n              .set({ created: true });\r\n          });\r\n      });\r\n  }\r\n  function updateUser(user) {\r\n    return firebaseDB.collection(\"users\").doc(user.uid).update({\r\n      displayName: user.displayName,\r\n      photoURL: user.photoURL,\r\n    });\r\n  }\r\n\r\n  const value = {\r\n    createUser,\r\n    updateUser,\r\n  };\r\n  return (\r\n    <FirestoreBeforeLoginContext.Provider value={value}>\r\n      {children}\r\n    </FirestoreBeforeLoginContext.Provider>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\contexts\\FirestoreAfterLoginContext.js",["128","129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":18,"nodeType":"136","messageId":"137","endLine":1,"endColumn":23},{"ruleId":"134","severity":1,"message":"138","line":2,"column":51,"nodeType":"136","messageId":"137","endLine":2,"endColumn":55},{"ruleId":"139","severity":1,"message":"140","line":82,"column":6,"nodeType":"141","endLine":82,"endColumn":19,"suggestions":"142"},{"ruleId":"134","severity":1,"message":"143","line":8,"column":30,"nodeType":"136","messageId":"137","endLine":8,"endColumn":41},{"ruleId":"134","severity":1,"message":"144","line":11,"column":9,"nodeType":"136","messageId":"137","endLine":11,"endColumn":16},{"ruleId":"139","severity":1,"message":"145","line":45,"column":6,"nodeType":"141","endLine":45,"endColumn":15,"suggestions":"146"},{"ruleId":"134","severity":1,"message":"147","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"148","line":6,"column":10,"nodeType":"136","messageId":"137","endLine":6,"endColumn":20},{"ruleId":"134","severity":1,"message":"149","line":7,"column":8,"nodeType":"136","messageId":"137","endLine":7,"endColumn":16},{"ruleId":"134","severity":1,"message":"143","line":10,"column":11,"nodeType":"136","messageId":"137","endLine":10,"endColumn":22},{"ruleId":"134","severity":1,"message":"147","line":1,"column":35,"nodeType":"136","messageId":"137","endLine":1,"endColumn":44},{"ruleId":"134","severity":1,"message":"150","line":10,"column":10,"nodeType":"136","messageId":"137","endLine":10,"endColumn":17},{"ruleId":"134","severity":1,"message":"151","line":15,"column":9,"nodeType":"136","messageId":"137","endLine":15,"endColumn":11},{"ruleId":"134","severity":1,"message":"143","line":19,"column":11,"nodeType":"136","messageId":"137","endLine":19,"endColumn":22},{"ruleId":"134","severity":1,"message":"152","line":1,"column":28,"nodeType":"136","messageId":"137","endLine":1,"endColumn":36},{"ruleId":"134","severity":1,"message":"151","line":7,"column":9,"nodeType":"136","messageId":"137","endLine":7,"endColumn":11},{"ruleId":"134","severity":1,"message":"151","line":21,"column":9,"nodeType":"136","messageId":"137","endLine":21,"endColumn":11},{"ruleId":"139","severity":1,"message":"153","line":68,"column":6,"nodeType":"141","endLine":68,"endColumn":19,"suggestions":"154"},{"ruleId":"139","severity":1,"message":"155","line":88,"column":35,"nodeType":"156","endLine":88,"endColumn":49},{"ruleId":"139","severity":1,"message":"157","line":93,"column":21,"nodeType":"158","endLine":93,"endColumn":31},{"ruleId":"134","severity":1,"message":"159","line":110,"column":12,"nodeType":"136","messageId":"137","endLine":110,"endColumn":26},{"ruleId":"134","severity":1,"message":"147","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"144","line":9,"column":9,"nodeType":"136","messageId":"137","endLine":9,"endColumn":16},{"ruleId":"134","severity":1,"message":"147","line":1,"column":35,"nodeType":"136","messageId":"137","endLine":1,"endColumn":44},{"ruleId":"134","severity":1,"message":"144","line":38,"column":9,"nodeType":"136","messageId":"137","endLine":38,"endColumn":16},{"ruleId":"160","severity":1,"message":"161","line":257,"column":19,"nodeType":"162","endLine":269,"endColumn":21},{"ruleId":"163","severity":1,"message":"164","line":117,"column":24,"nodeType":"158","messageId":"165","endLine":117,"endColumn":26},{"ruleId":"163","severity":1,"message":"164","line":155,"column":24,"nodeType":"158","messageId":"165","endLine":155,"endColumn":26},{"ruleId":"134","severity":1,"message":"147","line":1,"column":29,"nodeType":"136","messageId":"137","endLine":1,"endColumn":38},{"ruleId":"134","severity":1,"message":"152","line":1,"column":40,"nodeType":"136","messageId":"137","endLine":1,"endColumn":48},{"ruleId":"134","severity":1,"message":"143","line":12,"column":11,"nodeType":"136","messageId":"137","endLine":12,"endColumn":22},{"ruleId":"139","severity":1,"message":"166","line":333,"column":6,"nodeType":"141","endLine":333,"endColumn":8,"suggestions":"167"},{"ruleId":"139","severity":1,"message":"168","line":339,"column":6,"nodeType":"141","endLine":339,"endColumn":29,"suggestions":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createUser', 'sendEmailVerification', and 'updateProfile'. Either include them or remove the dependency array.","ArrayExpression",["172"],"'currentUser' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isVerified'. Either include it or remove the dependency array.",["173"],"'useEffect' is defined but never used.","'firebaseRT' is defined but never used.","'firebase' is defined but never used.","'NavLink' is defined but never used.","'id' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllMessages' and 'prevContactData'. Either include them or remove the dependency array.",["174"],"Assignments to the 'height' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","MemberExpression","Assignments to the 'limit' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","BinaryExpression","'timeDifference' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","unexpected","React Hook useEffect has missing dependencies: 'getAllContacts' and 'getAllConversations'. Either include them or remove the dependency array.",["175"],"React Hook useEffect has a missing dependency: 'updateContactList'. Either include it or remove the dependency array.",["176"],"no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},"Update the dependencies array to be: [createUser, currentUser, sendEmailVerification, updateProfile]",{"range":"187","text":"188"},"Update the dependencies array to be: [isVerified, success]",{"range":"189","text":"190"},"Update the dependencies array to be: [contactData, getAllMessages, prevContactData]",{"range":"191","text":"192"},"Update the dependencies array to be: [getAllContacts, getAllConversations]",{"range":"193","text":"194"},"Update the dependencies array to be: [allUsers, allContacts, updateContactList]",{"range":"195","text":"196"},[2768,2781],"[createUser, currentUser, sendEmailVerification, updateProfile]",[1310,1319],"[isVerified, success]",[2504,2517],"[contactData, getAllMessages, prevContactData]",[9659,9661],"[getAllContacts, getAllConversations]",[9786,9809],"[allUsers, allContacts, updateContactList]"]