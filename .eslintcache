[{"C:\\React\\messaging-app\\src\\index.js":"1","C:\\React\\messaging-app\\src\\reportWebVitals.js":"2","C:\\React\\messaging-app\\src\\components\\App.js":"3","C:\\React\\messaging-app\\src\\components\\Signup.js":"4","C:\\React\\messaging-app\\src\\components\\Login.js":"5","C:\\React\\messaging-app\\src\\components\\Home.js":"6","C:\\React\\messaging-app\\src\\components\\RightColumn.js":"7","C:\\React\\messaging-app\\src\\components\\LeftColumn.js":"8","C:\\React\\messaging-app\\src\\components\\AddContact.js":"9","C:\\React\\messaging-app\\src\\components\\Conversations.js":"10","C:\\React\\messaging-app\\src\\components\\Contacts.js":"11","C:\\React\\messaging-app\\src\\components\\ConversationLayout.js":"12","C:\\React\\messaging-app\\src\\components\\PrivateRoute.js":"13","C:\\React\\messaging-app\\src\\components\\Settings.js":"14","C:\\React\\messaging-app\\src\\components\\EditProfile.js":"15","C:\\React\\messaging-app\\src\\contexts\\AuthContext.js":"16","C:\\React\\messaging-app\\src\\firebase.js":"17","C:\\React\\messaging-app\\src\\components\\ForgotPassword.js":"18","C:\\React\\messaging-app\\src\\contexts\\FirestoreBeforeLoginContext.js":"19","C:\\React\\messaging-app\\src\\contexts\\FirestoreAfterLoginContext.js":"20"},{"size":915,"mtime":1610894487556,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":761,"mtime":1610831228089,"results":"24","hashOfConfig":"22"},{"size":8122,"mtime":1610894703240,"results":"25","hashOfConfig":"22"},{"size":4598,"mtime":1610806133190,"results":"26","hashOfConfig":"22"},{"size":789,"mtime":1611081958126,"results":"27","hashOfConfig":"22"},{"size":1197,"mtime":1610483105335,"results":"28","hashOfConfig":"22"},{"size":2599,"mtime":1610482690268,"results":"29","hashOfConfig":"22"},{"size":5732,"mtime":1611160001730,"results":"30","hashOfConfig":"22"},{"size":3790,"mtime":1610545992154,"results":"31","hashOfConfig":"22"},{"size":3020,"mtime":1610557126943,"results":"32","hashOfConfig":"22"},{"size":7254,"mtime":1610888596287,"results":"33","hashOfConfig":"22"},{"size":1102,"mtime":1610806266610,"results":"34","hashOfConfig":"22"},{"size":1404,"mtime":1610659127154,"results":"35","hashOfConfig":"22"},{"size":15094,"mtime":1610894695960,"results":"36","hashOfConfig":"22"},{"size":1871,"mtime":1610888756398,"results":"37","hashOfConfig":"22"},{"size":619,"mtime":1610831069019,"results":"38","hashOfConfig":"22"},{"size":4834,"mtime":1610807586314,"results":"39","hashOfConfig":"22"},{"size":887,"mtime":1610895353445,"results":"40","hashOfConfig":"22"},{"size":4337,"mtime":1611160270433,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"rjshps",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\React\\messaging-app\\src\\index.js",[],["90","91"],"C:\\React\\messaging-app\\src\\reportWebVitals.js",[],"C:\\React\\messaging-app\\src\\components\\App.js",["92"],"import { Switch, Route } from \"react-router-dom\";\nimport \"../App.css\";\nimport Login from \"./Login\";\nimport Signup from \"./Signup.js\";\nimport Home from \"./Home\";\nimport EditProfile from \"./EditProfile\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport ForgotPassword from \"./ForgotPassword\";\n\nfunction App() {\n  return (\n    <div className=\"App bg-dark\">\n      <Switch>\n        <PrivateRoute exact path=\"/login\" component={Login} />\n        <PrivateRoute exact path=\"/signup\" component={Signup} />\n        <PrivateRoute exact path=\"/edit-profile\" component={EditProfile} />\n        <PrivateRoute exact path=\"/reset-password\" component={ForgotPassword} />\n        <PrivateRoute path=\"/\" component={Home} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\React\\messaging-app\\src\\components\\Signup.js",["93","94"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Form, Button, Container, Toast, Spinner, Card } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { BsArrowLeftShort } from \"react-icons/bs\";\r\nimport { FaTimes } from \"react-icons/fa\";\r\nimport { FiAlertCircle } from \"react-icons/fi\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { useFirestoreBeforeLogin } from \"../contexts/FirestoreBeforeLoginContext\";\r\n\r\nexport default function Signup() {\r\n  const {\r\n    signup,\r\n    sendEmailVerification,\r\n    currentUser,\r\n    updateProfile,\r\n  } = useAuth();\r\n  const { createUser } = useFirestoreBeforeLogin();\r\n  const nameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passRef = useRef();\r\n  const confPassRef = useRef();\r\n  const [error, setError] = useState(false);\r\n  const [errorText, setErrorText] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n  const [lengthError, setLengthError] = useState(false);\r\n  const [matchingError, setMatchingError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setError(false);\r\n    setLengthError(false);\r\n    setMatchingError(false);\r\n    setSuccess(false);\r\n    if (\r\n      passRef.current.value.length >= 6 &&\r\n      passRef.current.value === confPassRef.current.value\r\n    ) {\r\n      setLoading(true);\r\n\r\n      signup(emailRef.current.value, passRef.current.value)\r\n        .then(function (value) {\r\n          setSuccess(true);\r\n        })\r\n        .catch(function (error) {\r\n          setError(true);\r\n          setErrorText(error.message);\r\n        });\r\n    }\r\n\r\n    if (passRef.current.value.length < 6) {\r\n      setLengthError(true);\r\n      passRef.current.focus();\r\n    }\r\n    if (passRef.current.value !== confPassRef.current.value) {\r\n      setMatchingError(true);\r\n      passRef.current.focus();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let unsubscribeVerification;\r\n    let unsubscribeName;\r\n    let unsubCreateUser;\r\n    console.log(\"test\", currentUser);\r\n    if (currentUser) {\r\n      unsubscribeName = updateProfile(currentUser, {\r\n        name: nameRef.current.value,\r\n      }).finally(() => {\r\n        unsubCreateUser = createUser({\r\n          uid: currentUser.uid,\r\n          displayName: currentUser.displayName,\r\n          photoURL:\r\n            \"https://firebasestorage.googleapis.com/v0/b/flashsend-ece71.appspot.com/o/blank-profile-picture-973460_640.png?alt=media&token=aaa87789-49e5-477d-897a-ab83ce57ccc7\",\r\n        });\r\n      });\r\n      unsubscribeVerification = sendEmailVerification(currentUser);\r\n    }\r\n\r\n    return [unsubscribeName, unsubscribeVerification, unsubCreateUser];\r\n  }, [currentUser]);\r\n  return (\r\n    <div className=\"signUpContainer min-vh-100 d-flex align-items-center justify-content-center flex-column\">\r\n      <Link to=\"/\">\r\n        <BsArrowLeftShort\r\n          style={{\r\n            position: \"absolute\",\r\n            fontSize: \"3em\",\r\n            top: \"5%\",\r\n            left: \"5%\",\r\n            color: \"white\",\r\n          }}\r\n        />\r\n      </Link>\r\n      <header\r\n        style={{\r\n          color: \"white\",\r\n          textShadow: \"2px 2px 2px red\",\r\n        }}\r\n      >\r\n        Create your account!\r\n      </header>\r\n      <Container className=\"container d-flex justify-content-center p-4\">\r\n        <Form onSubmit={handleSubmit} className=\"col-md-6\">\r\n          <Form.Group>\r\n            <Form.Label>\r\n              Full Name <span className=\"text-danger\">*</span>\r\n            </Form.Label>\r\n            <Form.Control ref={nameRef} type=\"text\" required></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>\r\n              Email <span className=\"text-danger\">*</span>\r\n            </Form.Label>\r\n            <Form.Control ref={emailRef} type=\"email\" required></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>\r\n              Password <span className=\"text-danger\">*</span>\r\n            </Form.Label>\r\n            <Form.Control ref={passRef} type=\"password\" required></Form.Control>\r\n            <Form.Text className=\"text-danger\">\r\n              Password should be at least 6 characters.\r\n            </Form.Text>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>\r\n              Confirm Password <span className=\"text-danger\">*</span>\r\n            </Form.Label>\r\n            <Form.Control\r\n              ref={confPassRef}\r\n              type=\"password\"\r\n              required\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Button\r\n            disabled={loading}\r\n            type=\"submit\"\r\n            className=\"bg-light text-dark font-weight-bold w-100 mt-4 mb-2\"\r\n            style={{\r\n              borderRadius: \"0\",\r\n              boxShadow: \"6px 6px 2px red\",\r\n              fontSize: \"1.2rem\",\r\n            }}\r\n          >\r\n            Create Account\r\n          </Button>\r\n          {/* display toast if password contains less than 6 characters */}\r\n          {lengthError && (\r\n            <Toast className=\"mx-auto mt-4\">\r\n              <Toast.Body className=\"bg-danger text-light\">\r\n                <strong>Password should be at least 6 characters</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n          {/* display toast if passwords doesnt match */}\r\n          {matchingError && (\r\n            <Toast className=\"mx-auto mt-4\">\r\n              <Toast.Body className=\"bg-danger text-light\">\r\n                <strong>Passwords do not match</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n        </Form>\r\n      </Container>\r\n      {/* display overlay with toasts when user creating account */}\r\n      {loading && (\r\n        <div\r\n          className=\"min-vh-100 w-100 d-flex align-items-center justify-content-center position-absolute\"\r\n          style={{ backgroundColor: \"rgba(0,0,0,0.8)\", zIndex: \"999\" }}\r\n        >\r\n          {/* display spinner as long as waiting for firebase response */}\r\n          {!success && !error && (\r\n            <Spinner animation=\"border\" role=\"status\" variant=\"danger\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n          )}\r\n          {/* display this toast if response is success */}\r\n          {success && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => {\r\n                setLoading(false);\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FiAlertCircle\r\n                  style={{\r\n                    color: \"orange\",\r\n                    fontSize: \"2.5rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n                <strong>\r\n                  Your account created successfully! You need to verify your\r\n                  email address by following the instructions included in the\r\n                  mail we sent you!\r\n                </strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n          {/* display this toast if request fails */}\r\n          {error && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => setLoading(false)}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FaTimes\r\n                  style={{\r\n                    color: \"red\",\r\n                    fontSize: \"2rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n\r\n                <strong>{errorText}</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\Login.js",["95","96","97"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Form, Button, Toast, Spinner } from \"react-bootstrap\";\r\nimport { FaPaperPlane, FaTimes } from \"react-icons/fa\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\nexport default function Login() {\r\n  const { login, isVerified, currentUser } = useAuth();\r\n  const emailRef = useRef();\r\n  const passRef = useRef();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [verified, setVerified] = useState(true);\r\n  const [errorText, setErrorText] = useState(\"\");\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setVerified(true);\r\n    setError(false);\r\n    setSuccess(false);\r\n    setErrorText(\"\");\r\n\r\n    login(emailRef.current.value, passRef.current.value)\r\n      .then(() => {\r\n        setSuccess(true);\r\n      })\r\n      .catch((error) => {\r\n        setError(true);\r\n        setErrorText(error.message);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      setVerified(isVerified);\r\n\r\n      if (isVerified) setLoading(false);\r\n    }\r\n    // return () => {\r\n    //   cleanup;\r\n    // };\r\n  }, [success]);\r\n  return (\r\n    <div className=\"loginContainer min-vh-100 d-flex align-items-center justify-content-center flex-column\">\r\n      <FaPaperPlane className=\"paper-plane d-none d-md-block\" />\r\n      <header\r\n        style={{\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n          textShadow: \"6px 6px 2px red\",\r\n        }}\r\n      >\r\n        FlashSend\r\n      </header>\r\n      <content className=\"container d-flex justify-content-center p-4\">\r\n        <Form onSubmit={handleSubmit} className=\"col-md-6\">\r\n          <Form.Group>\r\n            <Form.Label>Email</Form.Label>\r\n            <Form.Control ref={emailRef} type=\"email\" required></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control ref={passRef} type=\"password\" required></Form.Control>\r\n            <Form.Text\r\n              className=\"text-white text-center\"\r\n              style={{ fontSize: \".9rem\" }}\r\n            >\r\n              Forgot your password?{\" \"}\r\n              <Link to=\"/reset-password\" className=\"text-danger\">\r\n                Reset\r\n              </Link>\r\n            </Form.Text>\r\n          </Form.Group>\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"bg-light text-dark font-weight-bold w-100 mt-4 mb-2\"\r\n            style={{\r\n              borderRadius: \"0\",\r\n              boxShadow: \"6px 6px 2px red\",\r\n              fontSize: \"1.2rem\",\r\n            }}\r\n          >\r\n            Login\r\n          </Button>\r\n\r\n          <small className=\"text-white\" style={{ fontSize: \".9rem\" }}>\r\n            New to FlashSend?{\" \"}\r\n            <Link to=\"/signup\" className=\"text-danger\">\r\n              Create an account\r\n            </Link>\r\n          </small>\r\n        </Form>\r\n      </content>\r\n      {/* display overlay with toasts when user creating account */}\r\n      {loading && (\r\n        <div\r\n          className=\"min-vh-100 w-100 d-flex align-items-center justify-content-center position-absolute\"\r\n          style={{ backgroundColor: \"rgba(0,0,0,0.8)\", zIndex: \"999\" }}\r\n        >\r\n          {/* display spinner as long as waiting for firebase response */}\r\n          {!error && verified && (\r\n            <Spinner animation=\"border\" role=\"status\" variant=\"danger\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n          )}\r\n          {/* display this toast if request fails */}\r\n\r\n          {(error || !verified) && (\r\n            <Toast onClose={() => setLoading(false)}>\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FaTimes\r\n                  style={{\r\n                    color: \"red\",\r\n                    fontSize: \"2rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n\r\n                <strong>\r\n                  {error\r\n                    ? errorText\r\n                    : \"You must verify your email before logging in! Instructions are included in the email we sent you with your signup!\"}\r\n                </strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\Home.js",["98","99","100"],"import React, { useEffect } from \"react\";\r\nimport RightColumn from \"./RightColumn\";\r\nimport LeftColumn from \"./LeftColumn\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { FirestoreAfterLoginProvider } from \"../contexts/FirestoreAfterLoginContext\";\r\nimport { useFirestoreAfterLogin } from \"../contexts/FirestoreAfterLoginContext\";\r\n\r\nexport default function Home() {\r\n  // const { allContacts } = useFirestoreAfterLogin();\r\n  // useEffect(() => {\r\n  //   console.log(allContacts);\r\n  // }, []);\r\n  return (\r\n    <FirestoreAfterLoginProvider>\r\n      <div\r\n        className=\"dashboardContainer d-flex\"\r\n        style={{ width: \"200vw\", overflow: \"hidden\" }}\r\n      >\r\n        <LeftColumn />\r\n        <RightColumn />\r\n      </div>\r\n    </FirestoreAfterLoginProvider>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\RightColumn.js",[],"C:\\React\\messaging-app\\src\\components\\LeftColumn.js",[],"C:\\React\\messaging-app\\src\\components\\AddContact.js",["101","102","103","104"],"C:\\React\\messaging-app\\src\\components\\Conversations.js",[],"C:\\React\\messaging-app\\src\\components\\Contacts.js",[],"C:\\React\\messaging-app\\src\\components\\ConversationLayout.js",[],"C:\\React\\messaging-app\\src\\components\\PrivateRoute.js",["105"],"import React, { useEffect } from \"react\";\r\nimport { Redirect, Route, useLocation } from \"react-router-dom\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n  const location = useLocation();\r\n  const loginPathName = \"/login\";\r\n  const signUpPathName = \"/signup\";\r\n  const forgotPasswordName = \"/reset-password\";\r\n  const { isVerified, currentUser } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        return isVerified && currentUser ? (\r\n          location.pathname === loginPathName ||\r\n          location.pathname === signUpPathName ||\r\n          location.pathname === forgotPasswordName ? (\r\n            <Redirect to=\"/\" />\r\n          ) : (\r\n            <Component {...props} />\r\n          )\r\n        ) : location.pathname === loginPathName ||\r\n          location.pathname === signUpPathName ||\r\n          location.pathname === forgotPasswordName ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/login\" />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\components\\Settings.js",[],"C:\\React\\messaging-app\\src\\components\\EditProfile.js",["106","107","108"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Toast,\r\n  Spinner,\r\n  ProgressBar,\r\n} from \"react-bootstrap\";\r\nimport { BsBoxArrowInUp, BsArrowLeftShort } from \"react-icons/bs\";\r\nimport { FaTimes, FaCheck } from \"react-icons/fa\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { useFirestoreBeforeLogin } from \"../contexts/FirestoreBeforeLoginContext\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\n\r\nexport default function EditProfile() {\r\n  const {\r\n    updateEmail,\r\n    updatePassword,\r\n    updateProfile,\r\n    sendEmailVerification,\r\n    currentUser,\r\n  } = useAuth();\r\n  const { updateUser } = useFirestoreBeforeLogin();\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [lengthError, setLengthError] = useState(false);\r\n  const [matchingError, setMatchingError] = useState(false);\r\n  const [errorText, setErrorText] = useState(\"\");\r\n  const [uploadLoading, setUploadLoading] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const prevEmail = currentUser.email;\r\n  const history = useHistory();\r\n  const fileRef = useRef();\r\n  const nameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passRef = useRef();\r\n  const confPassRef = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setError(false);\r\n    setLengthError(false);\r\n    setMatchingError(false);\r\n    setSuccess(false);\r\n    setUploadLoading(false);\r\n\r\n    //initial checks for password requirements\r\n    if (passRef.current.value !== \"\" && passRef.current.value.length < 6) {\r\n      setLengthError(true);\r\n      passRef.current.focus();\r\n      return;\r\n    }\r\n    if (passRef.current.value !== confPassRef.current.value) {\r\n      setMatchingError(true);\r\n      passRef.current.focus();\r\n      return;\r\n    }\r\n\r\n    let promises = [];\r\n    //first uploadImage as a promise if a file is selected.\r\n    if (fileRef.current.files.length > 0) {\r\n      setLoading(true);\r\n      promises.push(\r\n        new Promise((resolve, reject) =>\r\n          uploadImage(\r\n            fileRef.current.files[0],\r\n            currentUser.uid,\r\n            resolve,\r\n            reject\r\n          )\r\n        )\r\n      );\r\n    }\r\n    //if promise has items (in our case if uploadImage called)\r\n    if (promises.length > 0)\r\n      //wait uploadImage to execute\r\n      Promise.all(promises).then((values) => {\r\n        promises = [];\r\n        //store imageurl\r\n        const resolveURL = values[0];\r\n        //check for changes in displayName, if so update\r\n        if (\r\n          nameRef.current.value !== currentUser.displayName ||\r\n          fileRef.current.files.length > 0\r\n        ) {\r\n          promises.push(\r\n            updateProfile(currentUser, {\r\n              name: nameRef.current.value,\r\n              url: resolveURL,\r\n            })\r\n          );\r\n\r\n          promises.push(\r\n            updateUser({\r\n              uid: currentUser.uid,\r\n              displayName: nameRef.current.value,\r\n              photoURL: resolveURL,\r\n            })\r\n          );\r\n        }\r\n        //check for changes in email, is so update\r\n        if (emailRef.current.value !== currentUser.email) {\r\n          promises.push(updateEmail(emailRef.current.value));\r\n        }\r\n        //check for changes in password, if so update\r\n        if (passRef.current.value !== \"\")\r\n          promises.push(updatePassword(passRef.current.value));\r\n\r\n        //wait all these functions to execute\r\n        Promise.all(promises)\r\n          .then(() => {\r\n            //if email changed send verification mail to new mail address\r\n            if (prevEmail !== currentUser.email) {\r\n              sendEmailVerification(currentUser);\r\n            }\r\n\r\n            setSuccess(true);\r\n            setTimeout(() => {\r\n              setLoading(false);\r\n            }, 3000);\r\n          })\r\n          .catch((error) => {\r\n            setError(true);\r\n            setErrorText(error.message);\r\n          });\r\n      });\r\n    //if uploadImage didnt called do the same checks for the other account info,and execute functions\r\n    else {\r\n      if (nameRef.current.value !== currentUser.displayName) {\r\n        promises.push(\r\n          updateProfile(currentUser, {\r\n            name: nameRef.current.value,\r\n          })\r\n        );\r\n        promises.push(\r\n          updateUser({\r\n            uid: currentUser.uid,\r\n            displayName: nameRef.current.value,\r\n            photoURL: currentUser.photoURL,\r\n          })\r\n        );\r\n      }\r\n\r\n      if (emailRef.current.value !== currentUser.email) {\r\n        promises.push(updateEmail(emailRef.current.value));\r\n      }\r\n\r\n      if (passRef.current.value !== \"\")\r\n        promises.push(updatePassword(passRef.current.value));\r\n\r\n      if (promises.length > 0) {\r\n        setLoading(true);\r\n        Promise.all(promises)\r\n          .then(() => {\r\n            if (prevEmail !== currentUser.email)\r\n              sendEmailVerification(currentUser);\r\n            setSuccess(true);\r\n            setTimeout(() => {\r\n              setLoading(false);\r\n            }, 3000);\r\n          })\r\n          .catch((error) => {\r\n            setError(true);\r\n            setErrorText(error.message);\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleChange() {\r\n    const fr = new FileReader();\r\n    fr.onload = function () {\r\n      document.querySelector(\".profImage\").src = fr.result;\r\n    };\r\n    fr.readAsDataURL(fileRef.current.files[0]);\r\n  }\r\n\r\n  function uploadImage(file, uid, resolve, reject) {\r\n    var storageRef = firebase.storage().ref();\r\n    const metadata = {\r\n      contentType: file.type,\r\n    };\r\n    const uploadTask = storageRef\r\n      .child(`flashsend/${uid}/profilePic/${file.name}`)\r\n      .put(file, metadata);\r\n    setUploadLoading(true);\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      function (snapshot) {\r\n        // Observe state change events such as progress, pause, and resume\r\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n        setProgress(progress);\r\n        console.log(\"Upload is \" + progress + \"% done\");\r\n      },\r\n      function (error) {\r\n        reject();\r\n        // Handle unsuccessful uploads\r\n      },\r\n      function () {\r\n        // Handle successful uploads on complete\r\n        // For instance, get the download URL: https://firebasestorage.googleapis.com/...\r\n        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n          console.log(\"File available at\", downloadURL);\r\n\r\n          setUploadLoading(false);\r\n          resolve(downloadURL);\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"editProfileContainer min-vh-100 d-flex align-items-center justify-content-center flex-column\">\r\n      <Link to=\"/\">\r\n        <BsArrowLeftShort\r\n          style={{\r\n            position: \"absolute\",\r\n            fontSize: \"3em\",\r\n            top: \"5%\",\r\n            left: \"5%\",\r\n            color: \"white\",\r\n          }}\r\n        />\r\n      </Link>\r\n\r\n      <header\r\n        style={{\r\n          fontSize: \"3rem\",\r\n          color: \"white\",\r\n          textShadow: \"2px 2px 2px red\",\r\n        }}\r\n      >\r\n        Profile\r\n      </header>\r\n      <Container className=\"d-flex justify-content-center p-4\">\r\n        <Form onSubmit={handleSubmit}>\r\n          <Row className=\"w-100 mx-0\">\r\n            <Col md={12} className=\"d-flex justify-content-center mb-4\">\r\n              <Form.Group\r\n                className=\"col-5 d-flex justify-content-center\"\r\n                style={{ position: \"relative\", overflow: \"initial\" }}\r\n              >\r\n                <Form.Label\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    position: \"relative\",\r\n                    overflow: \"initial\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    className=\"profImage\"\r\n                    style={{\r\n                      width: \"150px\",\r\n                      height: \"150px\",\r\n                      borderRadius: \"50%\",\r\n                    }}\r\n                    src={\r\n                      currentUser.photoURL\r\n                        ? currentUser.photoURL\r\n                        : \"https://firebasestorage.googleapis.com/v0/b/flashsend-ece71.appspot.com/o/blank-profile-picture-973460_640.png?alt=media&token=aaa87789-49e5-477d-897a-ab83ce57ccc7\"\r\n                    }\r\n                  />\r\n                  <div\r\n                    className=\"profilePhotoOverlay\"\r\n                    style={{ display: \"none\" }}\r\n                  >\r\n                    <BsBoxArrowInUp\r\n                      style={{\r\n                        fontSize: \"3em\",\r\n                        position: \"absolute\",\r\n                        left: \"0\",\r\n                        right: \"0\",\r\n                        top: \"0\",\r\n                        bottom: \"0\",\r\n                        margin: \"auto\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <Form.Control\r\n                    onChange={handleChange}\r\n                    ref={fileRef}\r\n                    type=\"file\"\r\n                    style={{ opacity: \"0\", position: \"absolute\", zIndex: \"-1\" }}\r\n                  ></Form.Control>\r\n                </Form.Label>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Form.Group>\r\n                <Form.Label>Full Name</Form.Label>\r\n                <Form.Control\r\n                  ref={nameRef}\r\n                  type=\"text\"\r\n                  defaultValue={currentUser.displayName}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Form.Group>\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control\r\n                  ref={emailRef}\r\n                  type=\"text\"\r\n                  defaultValue={currentUser.email}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Form.Group>\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control ref={passRef} type=\"password\"></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Form.Group>\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control ref={confPassRef} type=\"password\"></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={12}>\r\n              <Form.Text className=\"text-light\">\r\n                <em>\r\n                  Fill password field, only if you want to change your password.\r\n                  Else leave it blank.\r\n                </em>\r\n              </Form.Text>\r\n            </Col>\r\n            <Col md={12} className=\"mt-3\">\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"bg-light text-dark font-weight-bold mt-4 mb-2\"\r\n                style={{\r\n                  borderRadius: \"0\",\r\n                  boxShadow: \"4px 4px 2px red\",\r\n                  fontSize: \"1.2rem\",\r\n                }}\r\n              >\r\n                Update\r\n              </Button>\r\n\r\n              {/* display toast if password contains less than 6 characters */}\r\n              {lengthError && (\r\n                <Toast className=\"mx-auto mt-4\">\r\n                  <Toast.Body className=\"bg-danger text-light\">\r\n                    <strong>Password should be at least 6 characters</strong>\r\n                  </Toast.Body>\r\n                </Toast>\r\n              )}\r\n              {/* display toast if passwords doesnt match */}\r\n              {matchingError && (\r\n                <Toast className=\"mx-auto mt-4\">\r\n                  <Toast.Body className=\"bg-danger text-light\">\r\n                    <strong>Passwords do not match</strong>\r\n                  </Toast.Body>\r\n                </Toast>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Container>\r\n      {/* display overlay with toasts when user creating account */}\r\n      {loading && (\r\n        <div\r\n          className=\"min-vh-100 w-100 d-flex align-items-center justify-content-center position-absolute\"\r\n          style={{ backgroundColor: \"rgba(0,0,0,0.8)\", zIndex: \"999\" }}\r\n        >\r\n          {/* display spinner as long as waiting for firebase response */}\r\n          {!success && !error && !uploadLoading && (\r\n            <Spinner animation=\"border\" role=\"status\" variant=\"danger\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n          )}\r\n          {/* display this toast if image is uploading \\\\*/}\r\n          {uploadLoading && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => {\r\n                setLoading(false);\r\n              }}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column\">\r\n                <strong className=\"my-3\">Uploading Profile Image...</strong>\r\n                <ProgressBar animated variant=\"danger\" now={progress} />\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n          {/* display this toast if response is success */}\r\n          {success && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => {\r\n                setLoading(false);\r\n              }}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FaCheck\r\n                  style={{\r\n                    color: \"green\",\r\n                    fontSize: \"2rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n                <strong>You profile information updated successfully</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n          {/* display this toast if request fails */}\r\n          {error && (\r\n            <Toast\r\n              style={{ maxWidth: \"800px\", minWidth: \"350px\" }}\r\n              onClose={() => setLoading(false)}\r\n            >\r\n              <Toast.Header className=\"d-flex justify-content-end\"></Toast.Header>\r\n              <Toast.Body className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                <FaTimes\r\n                  style={{\r\n                    color: \"red\",\r\n                    fontSize: \"2rem\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                />\r\n\r\n                <strong>{errorText}</strong>\r\n              </Toast.Body>\r\n            </Toast>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\contexts\\AuthContext.js",[],"C:\\React\\messaging-app\\src\\firebase.js",[],"C:\\React\\messaging-app\\src\\components\\ForgotPassword.js",[],"C:\\React\\messaging-app\\src\\contexts\\FirestoreBeforeLoginContext.js",["109"],"import React, { useContext, useEffect } from \"react\";\r\nimport { firebaseDB } from \"../firebase\";\r\n\r\nconst FirestoreBeforeLoginContext = React.createContext();\r\n\r\nexport function useFirestoreBeforeLogin() {\r\n  return useContext(FirestoreBeforeLoginContext);\r\n}\r\n\r\nexport function FirestoreBeforeLoginProvider({ children }) {\r\n  function createUser(user) {\r\n    return firebaseDB.collection(\"users\").doc(user.uid).set({\r\n      displayName: user.displayName,\r\n      photoURL: user.photoURL,\r\n    });\r\n  }\r\n  function updateUser(user) {\r\n    return firebaseDB.collection(\"users\").doc(user.uid).update({\r\n      displayName: user.displayName,\r\n      photoURL: user.photoURL,\r\n    });\r\n  }\r\n\r\n  const value = {\r\n    createUser,\r\n    updateUser,\r\n  };\r\n  return (\r\n    <FirestoreBeforeLoginContext.Provider value={value}>\r\n      {children}\r\n    </FirestoreBeforeLoginContext.Provider>\r\n  );\r\n}\r\n","C:\\React\\messaging-app\\src\\contexts\\FirestoreAfterLoginContext.js",["110"],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":18,"nodeType":"117","messageId":"118","endLine":1,"endColumn":23},{"ruleId":"115","severity":1,"message":"119","line":2,"column":51,"nodeType":"117","messageId":"118","endLine":2,"endColumn":55},{"ruleId":"120","severity":1,"message":"121","line":82,"column":6,"nodeType":"122","endLine":82,"endColumn":19,"suggestions":"123"},{"ruleId":"115","severity":1,"message":"124","line":8,"column":30,"nodeType":"117","messageId":"118","endLine":8,"endColumn":41},{"ruleId":"115","severity":1,"message":"125","line":11,"column":9,"nodeType":"117","messageId":"118","endLine":11,"endColumn":16},{"ruleId":"120","severity":1,"message":"126","line":45,"column":6,"nodeType":"122","endLine":45,"endColumn":15,"suggestions":"127"},{"ruleId":"115","severity":1,"message":"128","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":26},{"ruleId":"115","severity":1,"message":"129","line":4,"column":10,"nodeType":"117","messageId":"118","endLine":4,"endColumn":17},{"ruleId":"115","severity":1,"message":"130","line":6,"column":10,"nodeType":"117","messageId":"118","endLine":6,"endColumn":32},{"ruleId":"115","severity":1,"message":"128","line":1,"column":35,"nodeType":"117","messageId":"118","endLine":1,"endColumn":44},{"ruleId":"115","severity":1,"message":"131","line":6,"column":10,"nodeType":"117","messageId":"118","endLine":6,"endColumn":17},{"ruleId":"115","severity":1,"message":"132","line":11,"column":9,"nodeType":"117","messageId":"118","endLine":11,"endColumn":11},{"ruleId":"115","severity":1,"message":"124","line":15,"column":11,"nodeType":"117","messageId":"118","endLine":15,"endColumn":22},{"ruleId":"115","severity":1,"message":"128","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":26},{"ruleId":"115","severity":1,"message":"128","line":1,"column":35,"nodeType":"117","messageId":"118","endLine":1,"endColumn":44},{"ruleId":"115","severity":1,"message":"125","line":38,"column":9,"nodeType":"117","messageId":"118","endLine":38,"endColumn":16},{"ruleId":"133","severity":1,"message":"134","line":257,"column":19,"nodeType":"135","endLine":269,"endColumn":21},{"ruleId":"115","severity":1,"message":"128","line":1,"column":29,"nodeType":"117","messageId":"118","endLine":1,"endColumn":38},{"ruleId":"120","severity":1,"message":"136","line":144,"column":6,"nodeType":"122","endLine":144,"endColumn":8,"suggestions":"137"},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createUser', 'sendEmailVerification', and 'updateProfile'. Either include them or remove the dependency array.","ArrayExpression",["140"],"'currentUser' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isVerified'. Either include it or remove the dependency array.",["141"],"'useEffect' is defined but never used.","'useAuth' is defined but never used.","'useFirestoreAfterLogin' is defined but never used.","'NavLink' is defined but never used.","'id' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getAllContacts'. Either include it or remove the dependency array.",["142"],"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [createUser, currentUser, sendEmailVerification, updateProfile]",{"range":"149","text":"150"},"Update the dependencies array to be: [isVerified, success]",{"range":"151","text":"152"},"Update the dependencies array to be: [getAllContacts]",{"range":"153","text":"154"},[2768,2781],"[createUser, currentUser, sendEmailVerification, updateProfile]",[1310,1319],"[isVerified, success]",[4006,4008],"[getAllContacts]"]